It shall be verified that the runtime environment is not susceptible to buffer overflows, and that security controls prevent buffer overflows.
It shall be verified that the runtime environment is not susceptible to SQL Injection, and that security controls prevent SQL Injection.
It shall be verified that the runtime environment is not susceptible to Cross Site Scripting (XSS), and that security controls prevent XSS.
It shall be verified that the runtime environment is not susceptible to LDAP Injection, and that security controls prevent LDAP Injection.
It shall be verified that the runtime environment is not susceptible to OS Command Injection, and that security controls prevent OS Command Injection.
Data type, range and length shall be verified (if possible). 
If any potentially hazardous characters must be allowed as input, additional controls; such as output encoding, secure task specific APIs, and accounting for the utilization of that data throughout the application; shall be implemented. Examples of common hazardous characters include: (: < > " ' % ( ) & + \\' \").
It shall be verified that all input validation is carried out by a centralized input validation routine for the application.
It shall be verified that all input validation failures result in input rejection or input sanitization.
It shall be verified that all input validation or encoding routines are performed and enforced on the server side.
It shall be verified that all untrusted data that is output to HTML (including HTML elements, HTML attributes, JavaScript data values, CSS blocks, and URL attributes) is properly discarded for the applicable context.
It shall be verified that a character set, such as UTF-8, is specified for all sources of input.
It shall be verified that all input data is canonicalized for all downstream decoders or interpreters prior to validation.
If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, it shall be verified that security sensitive fields such as “accountBalance”, “role” or “password” are protected from malicious automatic binding.
It shall be verified that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, environment, etc.)
It shall be verified that a single input validation control is used by the application for each type of data that is accepted.
It shall be verified that all input validation failures are logged.
It shall be verified that for each type of output encoding/escaping performed by the application, there is a single security control for that type of output for the intended destination.
