It shall be verified that the application accepts only a defined set of HTTP request methods, such as GET and POST, and that unused methods are explicitly blocked
It shall be verified that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8).
It shall be verified that HTTP headers and/or other mechanisms for older browsers have been included to protect against click jacking attacks.
It shall be verified that HTTP headers in both requests and responses contain only printable ASCII characters.
The use of less complex data formats, such as JSON, shall be verified, and serialization of protected data shall be avoided
All XML processors and libraries in use by the application or on the underlying operating system shall be patched or upgraded. Additionally, dependency checkers shall be used,  and SOAP shall be updated to SOAP 1.2 or higher.
XML external entity and DTD processing shall be disabled in all XML parsers in the application, as per OWASP Cheat Sheet "XXE Prevention".
Positive server-side input validation (whitelisting), filtering, or sanitization shall be implemented to prevent hostile data within XML documents, headers, or nodes.
It shall be verified that XML or XSL file upload functionality validates incoming XML using XSD validation or similar.
SAST and DAST tools shall be used to help detect XXE in source code, although manual code review is the best alternative in large and complex applications with many integrations.
If the implementation of these controls is not possible, the use of virtual patching, API security gateways, or Web Application Firewalls (WAFs) shall be considered to detect, monitor, and block XXE attacks.