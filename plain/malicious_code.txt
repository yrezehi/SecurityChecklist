It shall be verified that no malicious code is in any code that was either developed or modified in order to create the application.
It shall be ensured that the integrity of interpreted code, libraries, executables, and configuration files is verified using checksums or hashes.
It shall be verified that all code implementing or using authentication controls is not affected by any malicious code.
It shall be verified that all code implementing or using session management controls is not affected by any malicious code.
It shall be verified that all code implementing or using access controls is not affected by any malicious code.
It shall be verified that all input validation controls are not affected by any malicious code.
It shall be verified that all code implementing or using output validation controls is not affected by any malicious code.
It shall be verified that all code supporting or using a cryptographic module is not affected by any malicious code.
It shall be verified that all code implementing or using error handling and logging controls is not affected by any malicious code.
It shall be verified all malicious activity is adequately sandboxed.
It shall be verified that protected data is rapidly sanitized from memory as soon as it is no longer needed.
Components shall be updated with the latest patches as soon as a user knows about published vulnerabilities.
Unused dependencies, unnecessary features, components, files, and documentation shall be removed.
Versions of both client-side and server-side components, (e.g., frameworks and libraries), and their dependencies shall be continuously inventoried using tools such as versions, DependencyCheck, retire.js, etc. Additionally, sources such as CVE and NVD, shall be continuously monitored for vulnerabilities in the components, and software composition analysis tools shall be used to automate the process. Subscription to email alerts for security vulnerabilities related to the used components shall be ensured as well.
Components shall be obtained from official sources and over secure links only. Signed packages shall be preferred to reduce the chance of including a modified, malicious component.
Libraries and components that are unmaintained or do not create security patches for older versions shall be monitored. If patching is not possible, deploying a virtual patch to monitor, detect, or protect against the discovered issue shall be considered.